version: '3'

services:
  backend:
    build: ./backend
    expose:
      - 8080
    env_file:
      - ./backend/.local.env
    networks:
      - app-network
    volumes:
      - ./backend:/app/backend
    depends_on:
      - postgres

  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: dbname
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
    networks:
      - app-network

   traefik:  # new
    build:
      context: ./traefik
      dockerfile: Dockerfile.traefik
    ports:
      - 80:80
      - 443:443
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik-public-certificates:/certificates"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.partysound.space`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=testuser:$$apr1$$jIKW.bdS$$eKXe4Lxjgy/rH65wP1iQe1"

  frontend:
    build:
      context: ./frontend
    expose:
      - 3000
    networks:
      - app-network
    environment:
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app/frontend
    labels:  # new
      - "traefik.enable=true"
      - "traefik.http.routers.flask.rule=Host(`partysound.space`)"
      - "traefik.http.routers.flask.tls=true"
      - "traefik.http.routers.flask.tls.certresolver=letsencrypt"

networks:
  app-network:

volumes:
  traefik-public-certificates: